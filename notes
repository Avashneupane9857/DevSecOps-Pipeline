Step Wise Guide for this application DevSecOps Pipeline (k8s,aws,jenkins,prometheus,grafana,argocd,sonarQube,trivy,) :-

1. Write all the tf files, K8s manifests, Docker file and docker-compose files as per required

2. Now For creating Master machine (EC2) in AWS create an IAM user give Administration Permission and Create Access Key 

3. Now configure aws in terminal by "aws configure " enter that access key and its secret key , region and anything asked

4. Now navigate to terraform folder and do "ssh-keygen" with some name (terraform-key) which generates the terraform-key.pub file in same directory 

5. Now where ever u generated file using ssh-keygen copy that path in ec2.tf files public_key = file("value") 

6. Then in variable.tf file write ur right region and ami id according to your machine and all (AMI id depends on region , Ubuntu Version etc) 

7. Now to make an instance enter these commands : terraform init , terraform plan and then terraform apply 

8. Now u can see in the aws ec2 part there is machine created and u can ssh inside it using the command provided there in connect and make sure to have the key same as u generated doing ssh-keygen (ssh inside machine from that same directory where that key is located also see chmod is correct or not )

9. Now in master machine open required ports which as we gonna run multiple thing on this machine [465,6379,30000-32767,6443,80,25,3000 - 10000,22,443] u can do this mannualy from UI of aws or else add those ports in ec2.tf as ingress 

10. Now in ssh machine (Master machine ) lets set up all required services like docker (https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04), jenkins ( sudo apt install openjdk-17-jre-headless -y
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins)


11. Create EKS Cluster on AWS (Master machine)
IAM user with access keys and secret access keys

AWSCLI should be configured (Setup AWSCLI)
command :- 
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo apt install unzip
unzip awscliv2.zip
sudo ./aws/install
aws configure

Install kubectl (Master machine)(Setup kubectl )
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin
kubectl version --short --client

Install eksctl (Master machine) (Setup eksctl)
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
eksctl version

12. Create EKS Cluster (Master machine)
eksctl create cluster --name=yourClusterName \
                    --region=urRegionname \
                    --version=1.30 \
                    --without-nodegroup


Associate IAM OIDC Provider (Master machine)

eksctl utils associate-iam-oidc-provider \
  --region us-east-2 \
  --cluster wanderlust \
  --approve


Create Nodegroup (Master machine)

eksctl create nodegroup --cluster=yourClusterName \
                     --region=urRegionName \
                     --name=anyname \
                     --node-type=t2.large \
                     --nodes=2 \
                     --nodes-min=2 \
                     --nodes-max=2 \
                     --node-volume-size=29 \
                     --ssh-access \
                     --ssh-public-key=eks-nodegroup-key 
                     note: We should make eks-nodegroup-key named keypair in that same region it is used to ssh inside the node and play aroun with node 

12. In Jenkins install  :-
 i. Trivy :- sudo apt-get install wget apt-transport-https gnupg lsb-release -y
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update -y
sudo apt-get install trivy -y
 
 ii. SonarQube using docker : docker run -itd --name SonarQube-Server -p 9000:9000 sonarqube:lts-community

 iii. To setup Gmail : - Generate app password from manage google account from gmail add those creds in jenkins credintails section -> Go to  Manage tools section and search for Extented Email notification in that section select our creds of email and save it 

 iv.  OWSAP: To set up this u need plugin of OWSAP in jenkins at first along side also install Docker, Pipeline-stage view , SonarQube Scanner 
 
v. Go to manage jenkins -> Tools and configure all installed tools Dependency-Check

something like this :-
Name
OWSAP

Install automatically
?
Install from github.com
Version

dependency-check 12.1.1
Add Installer


vi. Connect sonarQube and jenkins :- In sonarQube UI go to Administration then User their generate token create creds in credintal section with secret text option 
Now To integrate sonarQube go to manage jenkins -> System -> There find sonarQube installatioj and add name , Server Url and creds which u added earlier 

vii. Create Webhook for sonarQube and jenkins communication :- SonarQube -> Adminstration-> Configuration->Webhook (Without secret)

13. ArgoCd Setup :-
 Install and Configure ArgoCD (Master Machine) :-

Create argocd namespace
kubectl create namespace argocd

Apply argocd manifest
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

Make sure all pods are running in argocd namespace
watch kubectl get pods -n argocd

Install argocd CLI
sudo curl --silent --location -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.4.7/argocd-linux-amd64

Provide executable permission
sudo chmod +x /usr/local/bin/argocd

Check argocd services
kubectl get svc -n argocd

Change argocd server's service from ClusterIP to NodePort
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

Confirm service is patched or not
kubectl get svc -n argocd

Fetch the initial password of argocd server
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
Username: admin
Now, go to User Info and update your argocd password

Now with any created Ec2 machine or node IP address u can access at first please Add inbound rules in which ever port argocd-server NodePort is running 


Now login in argocd and go to setting Add repo and connect with it 

 Note if jenkins is slow it about heap memory problem with java please fix it 



All about DRY now :-

We are not supposed to repeat our code but incase of jenkins pipeline most of the time we have to write
same code again and again hence now we gonna create a common repo an SharedLibrary for Jenkins consisting 
various tasks as function hence add that repo in Jenkins -> Mangage Jenkins -> System -> search for Trusted pipeline and add that repo consiting Function of several Jenkins tasks 

And how do our pipeline reconginze that repo function to use in Our original pipeline we can add this line at the Top of Pipeline 
:- @Library('Shared') _
Here 'Shared' is the name i added while adding trusted Pipline repo 


Also setup docker hub creds 


14. Now we add pipeline for CD the gitops practice way (Directory= GitOps-> Jenkinsfile)

Here we just update manifests file and argocd picksup from there and delpoys it in cluster 

15. Now to setup argocd we shall login from our machine " argocd login url_of_argocd_running --username admin"
and it will ask password enter it then u can have access as admin 

16. Now to add our cluster in argocd :-
    
   i. Get ur cluster name :- "kubectl config get-contexts "

   ii. Add ur cluster in argocd :- "argocd cluster add DevSecOps-Pipeline@DevSecOps-Pipeline.ap-southeast-2.eksctl.io --name Dev
    SecOps-Pipeline"
   iii. To see clusters in argocd :- "argocd cluster list"
   iv. Now add ur repo and all in argocd by clicking in Create App 

   Note : Go to backend frontend, services and see in which port they are running and add those port in security group of worker node if u add in one it shall be added in all worker node as they share same security group 
   While adding the app in argocd remember namespace in kubernetes manifests and there should be same 

Now u can check frontend and backend must be running in repesctive url and ports and from now only if manifest
 file is changed directly from Developer and pushed the chnages then again argocd picksup the changes else if
  new code is commited and docekr image version is changed then it will automatically run CD pipeline too 
  and changes manifests file and argocd picks up the changes in manifest file and deploys the new image 
  hence it all about chnage in manifest file pushed in github (Github working as single source of turth:-GitOps)   



15. Now u can build CI pipeline and u will see error as u shall build it with parameters (Docker image tags)

Note: It will take approx 20 min of time as OWSAP have to bring on many file for dependency check (Only for once btw)

Note: Add Jenkins user to Docker group
If Jenkins is running as a system user (like jenkins), add it to the Docker group:
sudo usermod -aG docker jenkins
Then restart Jenkins:
sudo systemctl restart jenkins
